import timeit


# 元组(容器型数据类型)
"""
元组的特点：
不可变：一旦创建，元组的内容不能被修改。这意味着元组的元素不能被添加、删除或更改。
语法：元组使用圆括号 () 定义，或者简单地将多个值用逗号分隔。
索引访问：与列表一样，元组可以通过索引访问其元素。
可哈希：由于元组是不可变的，它们是可哈希的，因此可以作为字典的键或集合的元素。
轻量级：通常比列表占用更少的内存，因为不需要为可能的修改预留额外的空间。

列表的特点：
可变：列表的内容可以被修改，可以添加、删除或更改元素。
语法：列表使用方括号 [] 定义。
动态：可以根据需要动态地增加或减少元素。
不可哈希：由于列表是可变的，它们不能用作字典的键或集合的元素。
优缺点比较：
不可变性：元组的不可变性使得它们在某些情况下更安全，因为它们不会被意外修改。而列表的可变性使得它们在需要修改数据时更加灵活。
内存使用：元组通常比列表更轻量级，占用更少的内存。
性能：对于不需要修改的数据，使用元组可能比列表更高效。
可哈希性：元组可以作为字典的键，而列表不能。
使用场景：
元组的使用场景：

当你需要确保数据不被修改时，使用元组可以提供数据的不变性保证。
当你需要将数据作为字典的键或集合的元素时。
当你需要存储不需要改变的固定数据集时。
列表的使用场景：

当你需要一个可以动态修改的数据结构时，列表是更好的选择。
当你需要执行添加、删除或更改元素的操作时。
当你需要一个可以增长或收缩的数据结构时。

"""
import random

t1 = (1, 2, 3)
#
t2 = 1, 3, 4
print(type(t2))
print(t2)

print(len(t2))

print(t2[1])
print(t2[::2])

for i in t2:
    print(i)

print(1 in t2)
print(32 not in t2)

t3 = t1 + t2
print(t3)
print(t1 == t3)
print(t1 >= t2)
print(t2 >= (12, 32, 43))

# 注意一个元素在元组的情况
t = ()
print(type(t))
t4 = (123, )
print(type(t4))
t5 = (123)
print(type(t5))


# 打包和解包的过程
t2 = 1, 3, 4
print(type(t2))
print(t2)
i, j, k, *m = t2
print(i, j, k, m)
'''
*号表达式的例子
a = 1, 10, 100, 1000
i, j, *k = a
print(i, j, k)        # 1 10 [100, 1000]
i, *j, k = a
print(i, j, k)        # 1 [10, 100] 1000
*i, j, k = a
print(i, j, k)        # [1, 10] 100 1000
*i, j = a
print(i, j)           # [1, 10, 100] 1000
i, *j = a
print(i, j)           # 1 [10, 100, 1000]
i, j, k, *l = a
print(i, j, k, l)     # 1 10 100 [1000]
i, j, k, l, *m = a
print(i, j, k, l, m)  # 1 10 100 1000 []
'''

numbers = [random.randrange(1, 101) for _ in range(3)]
first, second, third = numbers
print(first, second, third)


a, b, *c = range(1, 10)
print(a, b, c)
a, b, c = [1, 10, 100]
print(a, b, c)
a, *b, c = 'hello'
print(a, b, c)

'''
# 效率问题
a, b, c = b, c, a
需要说明的是，上面的操作并没有用到打包和解包语法，
Python 的字节码指令中有ROT_TWO和ROT_THREE
这样的指令可以直接实现这个操作，效率是非常高的。
但是如果有多于三个变量的值要依次互换，这个时候是没有直接可用的字节码指令的，
需要通过打包解包的方式来完成变量之间值的交换。
'''


# 以下代码说明了不可变容器创建时间少，创建的快
print('%.3f 秒' % timeit.timeit('[1, 2, 3, 4, 5, 6, 7, 8, 9]', number=10000000))
print('%.3f 秒' % timeit.timeit('(1, 2, 3, 4, 5, 6, 7, 8, 9)', number=10000000))


# 元组合列表的转换
infos = 12, 32, 231
print(type(infos))
print(infos)
infos2 = list(infos)
print(infos2)



